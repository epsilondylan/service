// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: blockchain.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainServiceClient interface {
	CreateBlock(ctx context.Context, in *CRequest, opts ...grpc.CallOption) (*CResponse, error)
	JoinNode(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JResponse, error)
	ShowBlockchain(ctx context.Context, in *SRequest, opts ...grpc.CallOption) (*SResponse, error)
}

type blockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServiceClient(cc grpc.ClientConnInterface) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) CreateBlock(ctx context.Context, in *CRequest, opts ...grpc.CallOption) (*CResponse, error) {
	out := new(CResponse)
	err := c.cc.Invoke(ctx, "/BlockchainService/CreateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) JoinNode(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JResponse, error) {
	out := new(JResponse)
	err := c.cc.Invoke(ctx, "/BlockchainService/JoinNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) ShowBlockchain(ctx context.Context, in *SRequest, opts ...grpc.CallOption) (*SResponse, error) {
	out := new(SResponse)
	err := c.cc.Invoke(ctx, "/BlockchainService/ShowBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServiceServer is the server API for BlockchainService service.
// All implementations must embed UnimplementedBlockchainServiceServer
// for forward compatibility
type BlockchainServiceServer interface {
	CreateBlock(context.Context, *CRequest) (*CResponse, error)
	JoinNode(context.Context, *JoinRequest) (*JResponse, error)
	ShowBlockchain(context.Context, *SRequest) (*SResponse, error)
	mustEmbedUnimplementedBlockchainServiceServer()
}

// UnimplementedBlockchainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainServiceServer struct {
}

func (UnimplementedBlockchainServiceServer) CreateBlock(context.Context, *CRequest) (*CResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) JoinNode(context.Context, *JoinRequest) (*JResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNode not implemented")
}
func (UnimplementedBlockchainServiceServer) ShowBlockchain(context.Context, *SRequest) (*SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBlockchain not implemented")
}
func (UnimplementedBlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {}

// UnsafeBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServiceServer will
// result in compilation errors.
type UnsafeBlockchainServiceServer interface {
	mustEmbedUnimplementedBlockchainServiceServer()
}

func RegisterBlockchainServiceServer(s grpc.ServiceRegistrar, srv BlockchainServiceServer) {
	s.RegisterService(&BlockchainService_ServiceDesc, srv)
}

func _BlockchainService_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockchainService/CreateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).CreateBlock(ctx, req.(*CRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_JoinNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).JoinNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockchainService/JoinNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).JoinNode(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_ShowBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).ShowBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockchainService/ShowBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).ShowBlockchain(ctx, req.(*SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainService_ServiceDesc is the grpc.ServiceDesc for BlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlock",
			Handler:    _BlockchainService_CreateBlock_Handler,
		},
		{
			MethodName: "JoinNode",
			Handler:    _BlockchainService_JoinNode_Handler,
		},
		{
			MethodName: "ShowBlockchain",
			Handler:    _BlockchainService_ShowBlockchain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain.proto",
}
